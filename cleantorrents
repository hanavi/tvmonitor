#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import re
import pathlib
import magic


def load_searches(fname):

    with open(fname) as fd:
        data = json.loads(fd.read())
    return data


def find_matches(search):

    base_dir = pathlib.Path("/mnt/raid/hosts/deluge/")

    search_name = search[0]
    match_name = re.compile(f"{search_name}", flags=re.IGNORECASE)
    match_season = re.compile(".*(?P<show_info>[sS][0-9]{2}[eE][0-9]{2}).*")

    garbage = pathlib.Path("/mnt/raid/files/torrent_garbage")
    if garbage.exists() is False:
        garbage.mkdir(parents=True)


    for path in base_dir.glob("*"):
        path_str = str(path)
        show_info = match_season.match(path_str)
        if path.is_dir():
            if match_name.search(path_str) and show_info:
                season = show_info.group('show_info')[1:3]
                season = f"season{season}"
                episode = show_info.group('show_info')[4:6]
                for from_path in path.glob("*"):
                    if magic.from_file(str(from_path))[:10] == "ASCII text":
                        garbage_path = garbage / from_path.name
                        from_path.rename(garbage_path)
                    else:
                        to_path = pathlib.Path(f"{search[1]}/{season}/{from_path.name}")
                        if to_path.exists():
                            print(f"{to_path} already Exists!")
                        else:
                            from_path.rename(to_path)

            clean_path = path.glob("*")
            if len(list(clean_path)) == 0:
                path.rmdir()

        elif match_name.search(path_str) and show_info:

            season = show_info.group('show_info')[1:3]
            season = f"season{season}"
            episode = show_info.group('show_info')[4:6]
            if magic.from_file(path_str)[:10] == "ASCII text":
                garbage_path = garbage / path.name
                path.rename(garbage_path)
            else:
                to_path = pathlib.Path(f"{search[1]}/{season}/{path.name}")
                if to_path.exists():
                    print(f"{to_path} already Exists!")
                else:
                    path.rename(to_path)


def main():

    data = load_searches('/home/james/Dropbox/scripts/tvmonitor/searches.json')


    for d in data:
        find_matches(d)


if __name__ == "__main__":
    main()

